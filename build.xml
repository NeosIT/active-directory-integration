<?xml version="1.0" encoding="UTF-8"?>
<project name="Active Directory Integration 2" default="full-build">
	<property name="php" value="php" />
	<property name="pdepend" value="pdepend"/>
	<property name="phpcpd" value="phpcpd"/>
	<property name="phpcs" value="phpcs"/>
	<property name="phpdox" value="phpdox"/>
	<property name="phploc" value="phploc"/>
	<property name="phpmd" value="phpmd"/>
	<property name="phpunit" value="phpunit.phar"/>
	<property name="testsuite" value="unit" />
	<property name="composer" value="composer" />
	<property name="msgfmt" value="msgfmt" />

	<target name="full-build"
		 depends="prepare,static-analysis,phpunit,phpdox,-check-failure"
		 description="Performs static analysis, runs the tests, and generates project documentation"/>

	<target name="full-build-parallel"
		 depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
		 description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

	<target name="quick-build"
		 depends="prepare,lint,phpunit-no-coverage"
		 description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

	<target name="static-analysis"
		 depends="lint,phploc-ci,phpmd-ci,pdepend,phpcs-ci,phpcs-ci,phpcpd-ci"
		 description="Performs static analysis" />

	<!-- Adjust the threadCount attribute's value to the number of CPUs -->
	<target name="static-analysis-parallel"
		 description="Performs static analysis (executing the tools in parallel)">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="lint"/>
			<antcall target="phpcpd-ci"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc-ci"/>
		</parallel>
	</target>

	<target name="clean"
		 unless="clean.done"
		 description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete dir="${basedir}/build/phpdox"/>
		<property name="clean.done" value="true"/>
	</target>

	<target name="prepare"
		 unless="prepare.done"
		 depends="clean"
		 description="Prepare for build">
		<echo message="Using PHP version from ${php} against PHPUnit ${phpunit}" />
		<mkdir dir="${basedir}/build/api"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/phpdox"/>
		<property name="prepare.done" value="true"/>
	</target>

	<target name="lint"
		 unless="lint.done"
		 description="Perform syntax check of sourcecode files">
		<apply executable="${php}" taskname="lint">
			<arg value="-l" />
			
			<fileset dir="${basedir}/classes">
				<include name="**/*.php" />
			</fileset>
			
			<fileset dir="${basedir}/test">
				<include name="**/*.php" />
			</fileset>
		</apply>
		<property name="lint.done" value="true"/>
	</target>

	<target name="phploc"
		 unless="phploc.done"
		 description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${php}" taskname="phploc">
			<arg path="${phploc}" />
			<arg value="--count-tests" />
			<arg path="${basedir}/classes" />
			<arg path="${basedir}/test" />
		</exec>
		<property name="phploc.done" value="true"/>
	</target>

	<target name="phploc-ci"
		 unless="phploc.done"
		 depends="prepare"
		 description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${php}" taskname="phploc">
			<arg path="${phploc}" />
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg path="${basedir}/build/logs/phploc.csv" />
			<arg value="--log-xml" />
			<arg path="${basedir}/build/logs/phploc.xml" />
			<arg path="${basedir}/classes" />
			<arg path="${basedir}/test" />
		</exec>
		<property name="phploc.done" value="true"/>
	</target>
	
	<target name="phpmd"
		unless="phpmd.done"
		description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${php}" taskname="phpmd">
			<arg path="${phpmd}" />
			<arg path="${basedir}/classes" />
			<arg value="text" />
			<arg path="${basedir}/phpmd.xml" />
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>
 
	<target name="phpmd-ci"
		unless="phpmd.done"
		depends="prepare"
		description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${php}" taskname="phpmd">
			<arg path="${phpmd}" />
			<arg path="${basedir}/classes" />
			<arg value="xml" />
			<arg path="${basedir}/phpmd.xml" />
			<arg value="--reportfile" />
			<arg path="${basedir}/build/logs/pmd.xml" />
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>
 
	<target name="pdepend"
		 unless="pdepend.done"
		 depends="prepare"
		 description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		
		<exec executable="${php}" taskname="pdepend">
			<arg path="${pdepend}" />
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
			<arg path="${basedir}" />
		</exec>
		<property name="pdepend.done" value="true"/>
	</target>
	
	<target name="phpcs"
		 unless="phpcs.done"
		 description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${php}" taskname="phpcs">
			<arg path="${phpcs}" />
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/classes" />
			<arg path="${basedir}/test" />
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>

	<target name="phpcs-ci"
		 unless="phpcs.done"
		 depends="prepare"
		 description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${php}" taskname="phpcs">
			<arg path="${phpcs}" />
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg value="--extensions=php" />
			<arg value="--standard=PSR2" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/classes" />
			<arg path="${basedir}/test" />
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>
	
	<target name="phpcpd"
		 unless="phpcpd.done"
		 description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
		 <exec executable="${php}" taskname="phpcpd">
			<arg path="${phpcpd}" />
			<arg path="${basedir}/classes" />
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>
	
	<target name="phpcpd-ci"
		 unless="phpcpd.done"
		 depends="prepare"
		 description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
		 <exec executable="${php}" taskname="phpcpd">
			<arg path="${phpcpd}" />
			<arg value="--log-pmd" />
			<arg path="${basedir}/build/logs/pmd-cpd.xml" />
			<arg path="${basedir}/classes" />
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>

	<target name="phpunit"
		 unless="phpunit.done"
		 depends="prepare"
		 description="Run unit tests with PHPUnit">
		<exec executable="${php}" resultproperty="result.phpunit" taskname="phpunit">
			<arg value="${phpunit}" />
			<arg value="--testsuite" />
			<arg value="${testsuite}" />
			<arg value="--configuration"/>
			<arg path="${basedir}/phpunit.xml"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>
	
	<target name="phpunit-no-coverage"
		 unless="phpunit.done"
		 depends="prepare"
		 description="Run unit tests with PHPUnit (without generating code coverage reports)">
		<exec executable="${php}" failonerror="true" taskname="phpunit">
			<arg value="${phpunit}" />
			<arg value="--testsuite" />
			<arg value="${testsuite}" />
			<arg value="--configuration"/>
			<arg path="${basedir}/phpunit.xml"/>
			<arg value="--no-coverage"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>

	<target name="phpdox"
		 unless="phpdox.done"
		 depends="phploc-ci,phpcs-ci"
		 description="Generate project documentation using phpDox">
		<exec executable="${php}" taskname="phpdox">
			<arg path="${phpdox}"/>
		</exec>
		<property name="phpdox.done" value="true"/>
	</target>
	
	<target name="-check-failure">
		<fail message="PHPUnit did not finish successfully">
			<condition>
				<not>
					<equals arg1="${result.phpunit}" arg2="0"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="compile-all-languages"
			description="compile all language files for php">
		<antcall target="compile-language">
			<param name="srcFile" value="next_ad_int-de_DE.po" />
			<param name="desFile" value="next_ad_int-de_DE.mo" />
		</antcall>
		<antcall target="compile-language">
			<param name="srcFile" value="next_ad_int-de_DE.po" />
			<param name="desFile" value="next_ad_int-de_DE_formal.mo" />
		</antcall>
	</target>

	<target name="compile-language"
			description="compile one language file for php">
		<exec executable="${msgfmt}">
			<arg value="languages/${srcFile}" />
			<arg value="-o"/>
			<arg value="languages/${desFile}" />
		</exec>
	</target>

	<target name="prepare-for-publish"
			description="make the plugin runnable and delete all unnecessary files"
			depends="clean">
		<exec executable="${php}">
			<arg value="${composer}" />
			<arg value="install" />
			<arg value="--no-dev" />
		</exec>
		<delete file="${basedir}/.gitignore"/>
		<delete file="${basedir}/README.md"/>
		<delete file="${basedir}/phpunit.xml"/>
		<delete file="${basedir}/phpmd.xml"/>
		<delete file="${basedir}/phpdox.xml"/>
		<delete file="${basedir}/composer.json"/>
		<delete file="${basedir}/composer.lock"/>
		<delete file="${basedir}/logs/.gitignore"/>
		<delete file="${basedir}/logs/debug.log"/>
		<delete file="${basedir}/vendor/.gitignore"/>
		<delete dir="${basedir}/.git"/>
		<delete dir="${basedir}/.idea"/>
		<delete dir="${basedir}/build"/>
		<delete dir="${basedir}/test-ui"/>
		<delete dir="${basedir}/test"/>
		<delete dir="${basedir}/vendor/bin"/>
		<delete>
			<fileset dir="${basedir}/vendor/twig/twig">
				<include name="*"/>
				<include name=".*"/>
				<exclude name="CHANGELOG"/>
				<exclude name="LICENSE"/>
				<exclude name="README.rst"/>
			</fileset>
		</delete>
		<delete dir="${basedir}/vendor/twig/twig/doc"/>
		<delete dir="${basedir}/vendor/twig/twig/ext"/>
		<delete dir="${basedir}/vendor/twig/twig/test"/>
		<delete dir="${basedir}/vendor/10up"/>
		<delete dir="${basedir}/vendor/antecedent"/>
		<delete dir="${basedir}/vendor/hamcrest"/>
		<delete dir="${basedir}/vendor/mockery"/>
		<delete dir="${basedir}/vendor/defuse/php-encryption/dist"/>
		<delete dir="${basedir}/vendor/defuse/php-encryption/docs"/>
		<delete dir="${basedir}/vendor/defuse/php-encryption/.gitignore"/>
		<delete dir="${basedir}/vendor/paragonie/random_compat/dist"/>
		<delete dir="${basedir}/vendor/paragonie/random_compat/other"/>
		<delete dir="${basedir}/vendor/paragonie/random_compat/build-phar.sh"/>
		<!-- self destruction -->
		<delete file="${basedir}/build.xml"/>
	</target>

    <target name="set-stable-version"
            description="set the stable version in the readme.txt">
        <replace file="readme.txt" token="REPLACE_BY_JENKINS_SCRIPT" value="${version}">
        </replace>
    </target>

    <target name="set-current-version"
            description="set the stable version in the index.php">
        <replace file="index.php" token="REPLACE_BY_JENKINS_SCRIPT" value="${version}">
        </replace>
    </target>
	
	<target name="package" description="ZIPs the whole directory">
		<zip 
			destfile="${basedir}/next-active-directory-integration.zip"
			basedir="${basedir}"/>
	</target>
</project>